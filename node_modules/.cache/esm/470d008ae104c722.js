let chalk,fs,ncp,path,shell,execa,Listr,projectInstall,promisify,makeFolder,makeGulpfileJs;_e10‍.x([["DIRECTORIES",()=>DIRECTORIES],["createProject",()=>createProject]]);_e10‍.w("chalk",[["default",["chalk"],function(v){chalk=v}]]);_e10‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_e10‍.w("ncp",[["default",["ncp"],function(v){ncp=v}]]);_e10‍.w("path",[["default",["path"],function(v){path=v}]]);_e10‍.w("shelljs",[["default",["shell"],function(v){shell=v}]]);_e10‍.w("execa",[["default",["execa"],function(v){execa=v}]]);_e10‍.w("listr",[["default",["Listr"],function(v){Listr=v}]]);_e10‍.w("pkg-install",[["projectInstall",["projectInstall"],function(v){projectInstall=v}]]);_e10‍.w("util",[["promisify",["promisify"],function(v){promisify=v}]]);_e10‍.w("./tasks/makeFolder",[["*",null,function(v){makeFolder=v}]]);_e10‍.w("./tasks/makeGulpfile",[["makeGulpfileJs",["makeGulpfileJs"],function(v){makeGulpfileJs=v}]]);
















const access = _e10‍.a("promisify",promisify)(_e10‍.a("fs",fs).access);
const copy = _e10‍.a("promisify",promisify)(_e10‍.a("ncp",ncp));

       let DIRECTORIES = {
	rootDir: '',
	presentationDir: ''
};;_e10‍.j(["DIRECTORIES"]);


const initGit = async options => {
	const result = await _e10‍.a("execa",execa)('git', ['init'], {
		cwd: options.targetDirectory,
	});
	if (result.failed) {
		return Promise.reject(new Error('Faild to initalize Git'))
	}
	return;
}

const copyGeneralFile = async options => {
	return copy(options.templateDirectory, options.targetDirectory);
}

//make main createProject
       async function createProject(options) {
	options = {
		...options,
		targetDirectory: options.targetDirectory || `${process.cwd()}/${options.rootFolder}`
	};

	const currentUrl = `${process.cwd()}/${options.rootFolder}`;
	const currentFileUrl =
		_e10‍._.meta.url; // file:///Users/gim-yohan/Projects/Veeva_CLM-boilerplate_3.0/src/main.js
	const templateDir = _e10‍.a("path",path).resolve(
		new URL(currentFileUrl).pathname, // /Users/gim-yohan/Projects/Veeva_CLM-boilerplate_3.0/src/main.js
		'../../templates'
	);
	options.templateDirectory = templateDir;
	try {
		await access(currentUrl, _e10‍.a("fs",fs).constants.R_OK);
	} catch (err) {
		if (err.code === 'EEXIST') {
			_e10‍.g.console.log('%s Project is already exist or Duplicate', _e10‍.a("chalk",chalk).red.bold('ERROR'));
			process.exit(1);
		}
	}
	_e10‍.a("fs",fs).mkdirSync(currentUrl);
	_e10‍.u(_e10‍.u(DIRECTORIES = {
		rootDir: `${process.cwd()}/${options.rootFolder}`,
		presentationDir: `${process.cwd()}/${options.rootFolder}/${options.presentation}`
	}));

	const tasks = new (_e10‍.a("Listr",Listr))([{
			title: 'Make Root Folder & Sub presentation Folder',
			task: () => {
				makeFolder.makeRootFolder(options);
				makeFolder.makeSubPresnetationFolder(options)
			}
		},
		{
			title: "Copy General files",
			task: () => copyGeneralFile(options),
		},
		{
			title: "make gulpfile.js",
			task: () => _e10‍.a("makeGulpfileJs",makeGulpfileJs)(options),
		},
		{
			title: 'Initalize git',
			task: () => initGit(options),
		}, {
			title: 'Install dependencies',
			task: () => _e10‍.a("projectInstall",projectInstall)({
				cwd: options.targetDirectory
			}),
			skip: () => !options.runInstall ? 'Pass -- install to automatically install dependencies' : undefined
		},
	])

	await tasks.run();
	_e10‍.g.console.log('%s Project ready', _e10‍.a("chalk",chalk).greenBright.bold('Done'));
	return true;
}