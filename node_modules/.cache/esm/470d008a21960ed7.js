let chalk,fs,ncp,path,promisify;_219‍.x([["createProject",()=>createProject]]);_219‍.w("chalk",[["default",["chalk"],function(v){chalk=v}]]);_219‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_219‍.w("ncp",[["default",["ncp"],function(v){ncp=v}]]);_219‍.w("path",[["default",["path"],function(v){path=v}]]);_219‍.w("util",[["promisify",["promisify"],function(v){promisify=v}]]);





const access = promisify(fs.access);
const copy = promisify(ncp);

async function copyTemplateFiles(options) {
	return copy(options.templateDirectory, options.targetDirectory, {
		clobber: false
	});
}

       async function createProject(options) {
	options = {
		...options,
		targetDirectory: options.targetDirectory || process.cwd()
	};

	const currentFileUrl = _219‍._.meta.url; // file:///Users/gim-yohan/Projects/Veeva_CLM-boilerplate_3.0/src/main.js
	const templateDir = path.resolve(
		new URL(currentFileUrl).pathname, // /Users/gim-yohan/Projects/Veeva_CLM-boilerplate_3.0/src/main.js
		'../../templates'
	);
	options.templateDirectory = templateDir; // /Users/gim-yohan/Projects/Veeva_CLM-boilerplate_3.0/templates/yohan
	console.log(`currentFileUrl : ${currentFileUrl}`);
	console.log(`new URL  : ${new URL(currentFileUrl).pathname}`);
	console.log(`templateDir  : ${templateDir}`);
	try {
		await access(templateDir, fs.constants.R_OK);
	} catch (err) {
		_219‍.g.console.error('%s Invalid template name', chalk.red.bold('ERROR'));
		process.exit(1);
	}

	console.log('Copy project files');
	await copyTemplateFiles(options);

	_219‍.g.console.log('%s Project ready', chalk.green.bold('DONE'));
	return true;
}
