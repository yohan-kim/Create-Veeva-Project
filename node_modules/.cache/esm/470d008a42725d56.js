let chalk,fs,ncp,path,promisify;_427‍.x([["createProject",()=>createProject]]);_427‍.w("chalk",[["default",["chalk"],function(v){chalk=v}]]);_427‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_427‍.w("ncp",[["default",["ncp"],function(v){ncp=v}]]);_427‍.w("path",[["default",["path"],function(v){path=v}]]);_427‍.w("util",[["promisify",["promisify"],function(v){promisify=v}]]);





const access = promisify(fs.access);
const copy = promisify(ncp);

async function copyTemplateFiles(options) {
  return copy(options.templateDirectory, options.targetDirectory, {
    clobber: false
  });
}

       async function createProject(options) {
  options = {
    ...options,
    targetDirectory: options.targetDirectory || process.cwd()
  };

  const currentFileUrl = _427‍._.meta.url;
  const templateDir = path.resolve(
    new URL(currentFileUrl).pathname,
    "../../templates",
    options.template.toLowerCase()
  );
  options.templateDirectory = templateDir;

  try {
    await access(templateDir, fs.constants.R_OK);
  } catch (err) {
    _427‍.g.console.error("%s Invalid template name", chalk.red.bold("ERROR"));
    process.exit(1);
  }

  console.log("Copy project files");
  await copyTemplateFiles(options);

  _427‍.g.console.log("%s Project ready", chalk.green.bold("DONE"));
  return true;
}
